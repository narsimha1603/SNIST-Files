import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score

# Load data
msg = pd.read_csv("C:/SNIST/document.csv", names=['message', 'label'])
print("Total Instances of Dataset:", msg.shape[0])
# Map text labels to numbers
msg['labelnum'] = msg.label.map({'pos': 1, 'neg': 0})
X = msg.message
y = msg.labelnum
# Split dataset into training and test sets
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=42)
# Convert text data into feature vectors
count_v = CountVectorizer()
Xtrain_dm = count_v.fit_transform(Xtrain)
Xtest_dm = count_v.transform(Xtest)

# Optional: View vocabulary as a DataFrame
# df = pd.DataFrame(Xtrain_dm.toarray(), columns=count_v.get_feature_names_out())
# Train Naive Bayes classifier
clf = MultinomialNB()
clf.fit(Xtrain_dm, ytrain)

# Predict and evaluate
pred = clf.predict(Xtest_dm)
print('\nAccuracy Metrics:')
print('Accuracy:', accuracy_score(ytest, pred))
print('Recall:', recall_score(ytest, pred))
print('Precision:', precision_score(ytest, pred))
print('Confusion Matrix:\n', confusion_matrix(ytest, pred))
