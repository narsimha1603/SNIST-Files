#include <stdio.h>
#include <limits.h>

void calculateSJF(int processes[], int n, int arrival_time[], int burst_time[]) {
    int completion_time[10], turnaround_time[10], waiting_time[10];
    int remaining_time[10], is_completed[10] = {0};
    int current_time = 0, completed = 0;
    float total_turnaround_time = 0, total_waiting_time = 0;

    // Initialize remaining time array
for(int i = 0; i< n; i++) {
remaining_time[i] = burst_time[i];
    }

printf("\nGantt Chart:\n");

    // Process until all processes are completed
while(completed != n) {
        // Find process with minimum remaining time
        int shortest_job = -1;
        int min_time = INT_MAX;

for(int i = 0; i< n; i++) {
            if(arrival_time[i] <= current_time&& !is_completed[i]) {
                if(remaining_time[i] <min_time) {
min_time = remaining_time[i];
shortest_job = i;
                }
                if(remaining_time[i] == min_time) {
                    if(arrival_time[i] <arrival_time[shortest_job]) {
shortest_job = i;
                    }
                }
            }
        }

if(shortest_job == -1) {
printf("| IDLE ");
current_time++;
            continue;
        }

        // Process the shortest job
remaining_time[shortest_job]--;
printf("| P%d ", processes[shortest_job]);

        // If process is completed
        if(remaining_time[shortest_job] == 0) {
completion_time[shortest_job] = current_time + 1;
turnaround_time[shortest_job] = completion_time[shortest_job] - arrival_time[shortest_job];
waiting_time[shortest_job] = turnaround_time[shortest_job] - burst_time[shortest_job];

total_turnaround_time += turnaround_time[shortest_job];
total_waiting_time += waiting_time[shortest_job];

is_completed[shortest_job] = 1;
            completed++;
        }

current_time++;
    }

printf("|\n\n");

    // Print process details
printf("\nProcess Details:\n");
printf("PID\tAT\tBT\tCT\tTAT\tWT\n");

for(int i = 0; i< n; i++) {
printf("%d\t%d\t%d\t%d\t%d\t%d\n", 
            processes[i], 
arrival_time[i], 
burst_time[i], 
completion_time[i], 
turnaround_time[i], 
waiting_time[i]);
    }

printf("\nAverage Turnaround Time: %.2f", total_turnaround_time/n);
printf("\nAverage Waiting Time: %.2f\n", total_waiting_time/n);
}

int main() {
    int processes[10], arrival_time[10], burst_time[10], n;

printf("Enter the number of processes (maximum 10): ");
scanf("%d", &n);

    // Input process details
for(int i = 0; i< n; i++) {
        processes[i] = i + 1;
printf("\nEnter details for Process %d:\n", i + 1);
printf("Arrival Time: ");
scanf("%d", &arrival_time[i]);
printf("Burst Time: ");
scanf("%d", &burst_time[i]);
    }
calculateSJF(processes, n, arrival_time, burst_time);
    return 0;
}
