import numpy as np
import matplotlib.pyplot as plt	
# Function to estimate coefficients (b_0, b_1) for linear regression
def estimate_coef(x, y):
    # Number of observations/points
    n = np.size(x)

    # Mean of x and y vectors
    m_x, m_y = np.mean(x), np.mean(y)
    # Calculating cross-deviation and deviation about x
    SS_xy = np.sum(y * x) - n * m_y * m_x
    SS_xx = np.sum(x * x) - n * m_x * m_x
    # Calculating regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x
    return b_0, b_1

# Function to plot the regression line
def plot_regression_line(x, y, b):
    # Plotting the actual points as scatter plot
    plt.scatter(x, y, color="m", marker="o", s=30)
    # Predicted response vector
    y_pred = b[0] + b[1] * x

    # Plotting the regression line
    plt.plot(x, y_pred, color="g")
    # Putting labels
    plt.xlabel('x')
    plt.ylabel('y')
    # Function to show plot
    plt.show()

# Main function
def main():
    # Observations
    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])
    # Estimating coefficients
    b = estimate_coef(x, y)
    # Print the estimated coefficients
    print("Estimated coefficients:\nb_0 = {}\nb_1 = {}".format(b[0], b[1]))
    # Plotting the regression line
    plot_regression_line(x, y, b)

if __name__ == "__main__":
    main()
